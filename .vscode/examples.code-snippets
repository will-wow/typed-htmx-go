{
  // Place your templ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "handler": {
    "scope": "go",
    "prefix": "handler",
    "body": [
      "package ${TM_DIRECTORY/.*\\/(.*)$/$1/}",
      "",
      "import (",
      "  \"net/http\"",
      "",
      "  \"github.com/will-wow/typed-htmx-go/examples/web/${TM_DIRECTORY/.*\\/(.*)$/$1/}/extempl\"",
      ")",
      "",
      "type example struct {",
      "  gom bool",
      "}",
      "",
      "func NewHandler(gom bool) http.Handler {",
      "  mux := http.NewServeMux()",
      "",
      "  ex := example{gom: gom}",
      "",
      "  mux.HandleFunc(\"GET /{$}\", ex.demo)",
      "",
      "  return mux",
      "}",
      "",
      "func (ex *example) demo(w http.ResponseWriter, r *http.Request) {",
      "  component := extempl.Page()",
      "  _ = component.Render(r.Context(), w)",
      "}"
    ],
    "description": "example handler file"
  },
  "page": {
    "scope": "templ",
    "prefix": "page",
    "body": [
      "package ${TM_DIRECTORY/.*\\/(.*)$/$1/}",
      "",
      "import (",
      "    \"embed\"",
      "",
      "    \"github.com/will-wow/typed-htmx-go/examples/web/layout/templ/layout\"",
      "    \"github.com/will-wow/typed-htmx-go/examples/web/exprint\"",
      "    \"github.com/will-wow/typed-htmx-go/htmx\"",
      ")",
      "",
      "var hx = htmx.NewTempl()",
      "",
      "//go:embed $TM_FILENAME",
      "var fs embed.FS",
      "var ex = exprint.New(fs, \"//\", \"\")",
      "",
      "templ Page() {",
      "  @layout.Wrapper(\"$2\", \"$3\") {",
      "     <h1>$2</h1>",
      "     <p>",
      "       Desc",
      "     </p>",
      "     <pre>",
      "       <code class=\"language-go\">",
      "        { ex.PrintOrErr(\"$TM_FILENAME\") }",
      "       </code>",
      "     </pre>",
      "   <h2>Demo</h2>",
      "   @demo()",
      "   }",
      "}",
      "",
      "templ demo() {",
      "  //ex:start:demo",
      "  //ex:end:demo",
      "}"
    ]
  },
  "gom": {
    "scope": "go",
    "prefix": "gom",
    "body": [
      "package exgom",
      "",
      "import (",
      "  \"embed\"",
      "",
      "g \"github.com/maragudk/gomponents\"",
      ". \"github.com/maragudk/gomponents/html\"",
      "  g \"github.com/maragudk/gomponents\"",
      "  \"github.com/will-wow/typed-htmx-go/examples/web/$2/shared\"",
      "  \"github.com/will-wow/typed-htmx-go/examples/web/exprint\"",
      "  \"github.com/will-wow/typed-htmx-go/examples/web/layout/gom/layout\"",
      "",
      "  \"github.com/will-wow/typed-htmx-go/htmx\"",
      ")",
      "",
      "var hx = htmx.NewGomponents()",
      "",
      "//go:embed $TM_FILENAME",
      "var fs embed.FS",
      "var ex = exprint.New(fs, \"//\", \"\")",
      "",
      "func Page() g.Node {",
      "  return layout.Wrapper(",
      "    \"$1\",",
      "    H1(g.Text(\"$1\")),",
      "    Class(\"$3\"),",
      "    P(",
      "      g.Text(\"Desc\"),",
      "    ),",
      "    Pre(",
      "      Code(",
      "        Class(\"language-go\"),",
      "        g.Text(ex.PrintOrErr(\"$TM_FILENAME_BASE\", \"demo\")),",
      "      ),",
      "     ),",
      "    H2(g.Text(\"Demo\")),",
      "    demo(),",
      "  )",
      "}",
      "",
      "func demo() g.Node {",
      "  //ex:start:demo",
      "  //ex:end:demo",
      "}"
    ],
    "description": "gom"
  },
  "ext": {
    "scope": "go",
    "prefix": "ext",
    "body": [
      "// package ${TM_DIRECTORY/.*\\/(.*)$/$1/} $3",
      "package ${TM_DIRECTORY/.*\\/(.*)$/$1/}",
      "",
      "import \"github.com/will-wow/typed-htmx-go/htmx\"",
      "",
      "// Extension $3",
      "//",
      "// # Install",
      "//",
      "//   <script src=\"https://unpkg.com/htmx.org@1.9.12/dist/ext/$2.js\"></script>",
      "//",
      "// Extension: [$2]",
      "//",
      "// [$2]: https://htmx.org/extensions/$2/",
      "const Extension htmx.Extension = \"$2\"",
      "",
      "// Attr",
      "func Attr[T any](hx htmx.HX[T]) T {",
      "  return hx.Attr(\"\")",
      "}"
    ],
    "description": "HTMX extension"
  },
  "ext_test": {
    "scope": "go",
    "prefix": "ext_test",
    "body": [
      "package ${TM_DIRECTORY/.*\\/(.*)$/$1/}_test",
      "",
      "import (",
      "  \"fmt\"",
      "",
      "  \"github.com/will-wow/typed-htmx-go/htmx\"",
      "  \"github.com/will-wow/typed-htmx-go/htmx/ext/${TM_DIRECTORY/.*\\/(.*)$/$1/}\"",
      ")",
      "",
      "var hx = htmx.NewStringAttrs()",
      "",
      "func ExampleExtension() {",
      "  attr := hx.Ext(${TM_DIRECTORY/.*\\/(.*)$/$1/}.Extension)",
      "  fmt.Println(attr)",
      "  // Output: hx-ext='$2'",
      "}"
    ],
    "description": "extension test"
  }
}
