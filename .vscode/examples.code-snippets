{
  // Place your templ workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "handler": {
    "scope": "go",
    "prefix": "handler",
    "body": [
      "package ${TM_DIRECTORY/.*\\/(.*)$/$1/}",
      "",
      "package activesearch",
      "",
      "import (",
      "	\"net/http\"",
      "",
      "	\"github.com/will-wow/typed-htmx-go/examples/web/${TM_DIRECTORY/.*\\/(.*)$/$1/}/extempl\"",
      ")",
      "",
      "type example struct {",
      "	gom bool",
      "}",
      "",
      "func NewHandler(gom bool) http.Handler {",
      "	mux := http.NewServeMux()",
      "",
      "	ex := example{gom: gom}",
      "",
      "	mux.HandleFunc(\"GET /{$}\", ex.demo)",
      "",
      "	return mux",
      "}",
      "",
      "func (ex *example) demo(w http.ResponseWriter, r *http.Request) {",
      "	component := extempl.Page()",
      "	_ = component.Render(r.Context(), w)",
      "}",
    ],
    "description": "example handler file",
  },
  "page": {
    "scope": "templ",
    "prefix": "page",
    "body": [
      "package ${TM_DIRECTORY/.*\\/(.*)$/$1/}",
      "",
      "import (",
      "  	\"embed\"",
      "",
      "  	\"github.com/will-wow/typed-htmx-go/examples/web/layout/templ/layout\"",
      "  	\"github.com/will-wow/typed-htmx-go/examples/web/${$2}/shared\"",
      "  	\"github.com/will-wow/typed-htmx-go/examples/web/exprint\"",
      "  	\"github.com/will-wow/typed-htmx-go/htmx\"",
      ")",
      "",
      "",
      "var hx = htmx.NewTempl()",
      "",
      "//go:embed activesearch.templ",
      "var fs embed.FS",
      "var ex = exprint.New(fs, \"//\", \"\")",
      "",
      "templ Page() {",
      "	@layout.Base(\"$1\") {",
      "		<h1>$1</h1>",
      "		<p>",
      "			Desc",
      "		</p>",
      "		<pre>",
      "			<code>",
      "   		{ ex.PrintOrErr(\"$2.templ\", \"$2\") }",
      "			</code>",
      "		</pre>",
      "	}",
      "}",
    ],
  },
  "gom": {
    "scope": "go",
    "prefix": "gom",
    "body": [
      "package exgom",
      "",
      "import (",
      "	\"embed\"",
      "	\"time\"",
      "",
      "	\"github.com/lithammer/dedent\"",
      "	g \"github.com/maragudk/gomponents\"",
      "	\"github.com/will-wow/typed-htmx-go/examples/web/$2/shared\"",
      "	\"github.com/will-wow/typed-htmx-go/examples/web/exprint\"",
      "	\"github.com/will-wow/typed-htmx-go/examples/web/layout/gom/layout\"",
      "",
      "	\"github.com/will-wow/typed-htmx-go/htmx\"",
      ")",
      "",
      "var hx = htmx.NewGomponents()",
      "",
      "//go:embed activesearch.gom.go",
      "var fs embed.FS",
      "var ex = exprint.New(fs, \"//\", \"\")",
      "",
      "func Page() g.Node {",
      "	return layout.Wrapper(",
      "		\"$1\",",
      "		H1(g.Text(\"$1\")),",
      "		P(",
      "			g.Text(\"Desc\"),",
      "		),",
      "		Pre(",
      "			Code(",
      "				Class(\"language-go\"),",
      "				g.Text(ex.PrintOrErr(\"$2.gom.go\", \"$2\")),",
      "			),",
      "		),",
    ],
    "description": "gom",
  },
}
