package clicktoedit

import (
	"cmp"
	"github.com/lithammer/dedent"

	"github.com/will-wow/typed-htmx-go/examples/templ/web/layout"
	"github.com/will-wow/typed-htmx-go/hx"
	"github.com/will-wow/typed-htmx-go/hx/swap"
)

templ Page(form *form) {
	@layout.Base("Click to edit") {
		<h1>Click To Edit</h1>
		<p>
			The click to edit pattern provides a way to offer inline editing of all or part of a record without a page refresh.
		</p>
		<ul>
			<li>
				This pattern starts with a UI that shows the details of a contact. The div has a button that will get the editing UI for the contact from /contact/1/edit
			</li>
		</ul>
		<pre>
			{ dedent.Dedent(`
				templ ViewForm(form *form) {
					<div { hx.New().Target(hx.TargetThis).Swap(swap.OuterHTML).Build()... }>
						<dl>
							<dt>First Name</dt>
							<dd>{ cmp.Or(form.FirstName, "None") }</dd>
							<dt>Last Name</dt>
							<dd>{ cmp.Or(form.LastName, "None") }</dd>
							<dt>Email</dt>
							<dd>{ cmp.Or(form.Email, "None") }</dd>
							<div role="group">
								<button { hx.New().Get("/examples/click-to-edit/edit").Build()... }>
									Click To Edit
								</button>
							</div>
						</dl>
					</div>
				}
			`) }
		</pre>
		<ul>
			<li>
				This returns a form that can be used to edit the contact
			</li>
		</ul>
		<pre>
			{ dedent.Dedent(`
				templ EditForm(form *form) {
					<form
						method="POST"
						action="/examples/click-to-edit/edit"
						{ hx.New().
						Post("/examples/click-to-edit/edit").
						Target(hx.TargetThis).
						Swap(swap.OuterHTML).
						Build()... }
					>
						<label>
							First Name
							<input
								type="text"
								name="firstName"
								value={ form.FirstName }
								aria-invalid={ form.AriaInvalid("LastName") }
							/>
							if form.HasError("FirstName") {
								<small>
									{ form.GetError("FirstName") }
								</small>
							}
						</label>
						<label>
							Last Name
							<input
								type="text"
								name="lastName"
								value={ form.LastName }
								aria-invalid={ form.AriaInvalid("LastName") }
							/>
							if form.HasError("LastName") {
								<small>
									{ form.GetError("LastName") }
								</small>
							}
						</label>
						<label>
							Email Address
							<input
								type="text"
								name="email"
								value={ form.Email }
								aria-invalid={ form.AriaInvalid("LastName") }
							/>
							if form.HasError("Email") {
								<small>
									{ form.GetError("Email") }
								</small>
							}
						</label>
						<div role="group">
							<button type="submit">Submit</button>
							<a
								href="/examples/click-to-edit"
								role="button"
								{ hx.New().Get("/examples/click-to-edit/view").Build()... }
							>
								Cancel
							</a>
						</div>
					</form>
				}
			`) }
		</pre>
		<ul>
			<li>
				The form issues a POST back to /edit, following the usual REST-ful pattern.
			</li>
			<li>
				If there is an error, the form swaps the form with error messages in place of the edit form.
			</li>
		</ul>
		<h2>Demo</h2>
		@ViewForm(form)
	}
}

templ ViewForm(form *form) {
	<div { hx.New().Target(hx.TargetThis).Swap(swap.OuterHTML).Build()... }>
		<dl>
			<dt>First Name</dt>
			<dd>{ cmp.Or(form.FirstName, "None") }</dd>
			<dt>Last Name</dt>
			<dd>{ cmp.Or(form.LastName, "None") }</dd>
			<dt>Email</dt>
			<dd>{ cmp.Or(form.Email, "None") }</dd>
			<div role="group">
				<button { hx.New().Get("/examples/click-to-edit/edit").Build()... }>
					Click To Edit
				</button>
			</div>
		</dl>
	</div>
}

templ EditForm(form *form) {
	<form
		method="POST"
		action="/examples/click-to-edit/edit"
		{ hx.New().
		Post("/examples/click-to-edit/edit").
		Target(hx.TargetThis).
		Swap(swap.OuterHTML).
		Build()... }
	>
		<label>
			First Name
			<input
				type="text"
				name="firstName"
				value={ form.FirstName }
				aria-invalid={ form.AriaInvalid("LastName") }
			/>
			if form.HasError("FirstName") {
				<small>
					{ form.GetError("FirstName") }
				</small>
			}
		</label>
		<label>
			Last Name
			<input
				type="text"
				name="lastName"
				value={ form.LastName }
				aria-invalid={ form.AriaInvalid("LastName") }
			/>
			if form.HasError("LastName") {
				<small>
					{ form.GetError("LastName") }
				</small>
			}
		</label>
		<label>
			Email Address
			<input
				type="text"
				name="email"
				value={ form.Email }
				aria-invalid={ form.AriaInvalid("LastName") }
			/>
			if form.HasError("Email") {
				<small>
					{ form.GetError("Email") }
				</small>
			}
		</label>
		<div role="group">
			<button type="submit">Submit</button>
			<a
				href="/examples/click-to-edit"
				role="button"
				{ hx.New().Get("/examples/click-to-edit/view").Build()... }
			>
				Cancel
			</a>
		</div>
	</form>
}
