package extempl

import (
	"embed"

	"github.com/will-wow/typed-htmx-go/examples/web/layout/templ/layout"
	"github.com/will-wow/typed-htmx-go/examples/web/exprint"
	"github.com/will-wow/typed-htmx-go/htmx/ext/sse"
	"github.com/will-wow/typed-htmx-go/htmx"
	"github.com/will-wow/typed-htmx-go/htmx/swap"
	"github.com/will-wow/typed-htmx-go/examples/web/sse_ex/shared"
)

var hx = htmx.NewTempl()

//go:embed sse.templ
var fs embed.FS
var ex = exprint.New(fs, "//", "")

templ Page() {
	@layout.Wrapper("Server-Sent Events", "sse") {
		<h1>Server-Sent Events</h1>
		<p>
			A demo countdown using Server-Sent Events, with htmx and typed-htmx-go.
		</p>
		<p>
			When you click the button below, that fetches a new element that uses the sse extension to start stream a countdown.
		</p>
		<pre>
			<code class="language-go">
				{ ex.PrintOrErr("sse.templ", "trigger") }
			</code>
		</pre>
		<p>
			The new elements uses the sse.Connect attribute to connect to a server-side event streaming countdown.
		</p>
		<pre>
			<code class="language-go">
				{ ex.PrintOrErr("sse.templ", "countdown") }
			</code>
		</pre>
		<p>
			Each second, the server sends a countdown message that updates the innerHTML of the div.
		</p>
		<pre>
			<code class="language-go">
				{ ex.PrintOrErr("sse.templ", "message") }
			</code>
		</pre>
		<p>
			After the countdown is complete, the server will send a ResetEvent, that closes removes the sse connection by replacing the sse.Connect element with the initial button using <code>hx.Swap(swap.OuterHTML)</code>.
		</p>
		<h2>Demo</h2>
		@Trigger()
	}
}

templ Trigger() {
	//ex:start:trigger
	<button
		{ hx.Get("/examples/templ/sse/countdown/")... }
		{ hx.Target(htmx.TargetThis)... }
		{ hx.Swap(swap.OuterHTML)... }
	>
		Start Countdown
	</button>
	//ex:end:trigger
}

templ Countdown() {
	//ex:start:countdown
	<div
		{ hx.Ext(sse.Extension)... }
		{ sse.Connect(hx, "/examples/templ/sse/countdown/feed/")... }
		{ sse.Swap(hx, shared.ResetEvent)... }
		{ hx.Swap(swap.OuterHTML)... }
	>
		<div
			{ sse.Swap(hx, shared.CountdownEvent)... }
			{ hx.Swap(swap.InnerHTML)... }
		></div>
	</div>
	//ex:end:countdown
}

//ex:start:message
templ Message(msg string) {
	<p>{ msg }</p>
}

//ex:end:message
